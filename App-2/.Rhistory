above10(x,10)
above10(x,1)
above10(x)
above10 <-function(x,a=10){
x[x>a]
}
above10(x)
columnmean <- function(y){
nc <- ncol(y)
means <-numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = T){
nc <- ncol(y)
means <-numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
args(lm)
args(paste)
args(cat)
help optim()
help(optim)
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
anova("mtcars.csv")
library(anova)
install.packages("anova")
summary.glm("mtcars.csv")
summary.glm(alp)
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
x <- c(1,2)
x[1]
x[0]
x[4]
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
load ("mtcars.csv")
load ('mtcars.csv')
read.csv("mtcars.csv")
alp <- read.csv("mtcars.csv")
alp[mpg]
alp$mpg
alp[1]
alp[as.character("mpg")]
alp[as.character("mpg"), as.character("cyl")]
xdata <- alp[as.character("mpg")]
ydata <- alp[as.character("cyl")]
newData <- data.frame(xdata,ydata)
newData[as.character("mpg")]
newData[as.character("xdata")]
newData[xdata]
newData[c(1,2)]
newData[c("mpg","cyl")]
shiny::runApp('App-1')
newData[as.character("mpg","cyl")]
View(newData)
newData[as.character(c("mpg","cyl")]
newData[as.character(c("mpg","cyl"))]
View(xdata)
View(newData)
shiny::runApp('App-1')
View(alp)
alp[,1]
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
alp$header
alp[1]
alp[,1]
names(alp)
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
cbind.na(1,1:7)
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
install.packages("memisc")
shiny::runApp('App-1')
lm(alp[2],alp[3])
lm(alp[2] ~ alp[3])
lm(alp[2] ~ alp[3], data=alp)
alpx <- data.frame(alp)
lm(alpx[2] ~ alpx[3], data=alpx)
lm(cyl ~ mpg, data=alpx)
shiny::runApp('App-1')
shiny::runApp('App-1')
alp[as.character(mpg)]
alp[,as.character(mpg)]
alp[,as.character("mpg")]
class(alp[,as.character("mpg")])
shiny::runApp('App-1')
shiny::runApp('App-1')
as.numeric("alp")
as.numeric(alp)
shiny::runApp('App-1')
abs(-0.5)
mod(-0.5)
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
install.packages("xtable")
install.packages("xtable")
install.packages("shinyTable")
library(devtools)
install_github("shinyTable", "trestletech")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
library(shiny)
library(shinyTable)
server <- function(input, output, session) {
rv <- reactiveValues(cachedTbl = NULL)
output$tbl <- renderHtable({
if (is.null(input$tbl)){
#fill table with 0
tbl <- matrix(0, nrow=3, ncol=3)
rv$cachedTbl <<- tbl
print(tbl)
return(tbl)
} else{
rv$cachedTbl <<- input$tbl
print(input$tbl)
return(input$tbl)
}
})
output$tblNonEdit <- renderTable({
rv$cachedTbl
})
}
ui <- shinyUI(pageWithSidebar(
headerPanel("Simple Shiny Table!"),
sidebarPanel(
helpText(HTML("A simple editable matrix with an update button.
Shows that only most recent change is saved.
<p>Created using <a href = \"http://github.com/trestletech/shinyTable\">shinyTable</a>."))
),
# Show the simple table
mainPanel(
#editable table
htable("tbl"),
#update button
submitButton("apply table edits"),
#to show saved edits
tableOutput("tblNonEdit")
)
))
shinyApp(ui = ui, server = server)
runApp(system.file("examples/01-simple", package="shinyTable"))
runApp(system.file("examples/03-click-input", package="shinyTable"))
runApp(system.file("examples/02-matrix", package="shinyTable"))
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
?rm
rm(ls())
rm(list = ls())
shiny::runApp('App-1')
class(alp)
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
rm(list = ls())
library(shiny)
library(plyr)
library(psych)
library(memisc)
library(ggplot2)
library(shinyTable)
shinyServer(function(input, output,session) {
datasetInput <- reactive({
inFile <- input$file1
if(is.null(inFile))
return(NULL)
alp <<-na.omit(read.csv(inFile$datapath, header = input$header))
})
output$contents <- renderDataTable(
if(is.null(input$contents))
{return (datasetInput())}
else
{return(alp)}
)
output$summary <- renderPrint({
summary(alp)
class(alp)
})
output$editTable <- renderHtable({
if (is.null(editTable))
{editTable <- alp
return(editTable)
}
observe({
})
FinalTable <- eventReactive(input$actButton3,{
updatedData <- input$editTable
})
alp <<- data.frame(FinalTable())
#     observe({
#       editTable<- alp
#     })
#
#     updatedtable <- eventReactive(input$actButton3,{
#       editTable
#     })
#}
#     newevent <- eventReactive(input$actButton3,{
#       alp
#     })
#     alp <<- newevent()
})
output$headerr <- renderPrint({
ddply(alp,.(alp$header),na.rm=T)
describe(alp)
})
output$plot1 <- renderPlot({
observe({
updateSelectInput(session,"x","X variable",choices = names(alp))
updateSelectInput(session,"y","Y variable",choices = names(alp))
})
selectedVars <- reactive({c(input$x, input$y)})
#plot1 <- eventReactive(input$actButton)
dtFrame <- eventReactive(input$actButton,{
xdata <- alp[as.character(selectedVars()[1])]
ydata <- alp[as.character(selectedVars()[2])]
newData <- data.frame(xdata,ydata)
})
#attach(alp)
plot(dtFrame(),type = input$plotType, pch=16, cex=1, col="black")
#type = input$plotType, pch=16, cex=1, col="black"
mod <- lm(dtFrame()[,2] ~ dtFrame()[,1])
abline(mod,col="grey", lwd=2)
output$sumLm1 <- renderPrint({mtable(mod)})
#     output$click_info <- renderPrint({
#       #     cat("input$plot1_click:\n")
#       #     str(input$plot1_click)
#       nearPoints(dtFrame(), input$plot1_click, addDist = T)
#     })
#
#     output$brush_info <- renderPrint(({
#       #     cat("input$plot1_brush:\n")
#       #     str(input$plot1_brush)
#       brushedPoints(dtFrame(), input$plot1_brush)
#     }))
})
output$sumLM <- renderPrint({
observe({
# updateSelectizeInput(session,"x2","X2 variable",choices = names(alp))
updateSelectInput(session,"y2","Y2 variable",choices = names(alp))
})
selectedVarsReg <- reactive({input$y2})
updatedY <- eventReactive(input$actButton2,{
#yselect <- selectedVarsReg()
ydata <-alp[as.character(selectedVarsReg())]
if (names(ydata) == names(alp[2])) {
xdata <- alp[3]
}
else{
xdata <- alp[2]
}
#updatedHeader <- data.frame(headerx[headerx != as.character(selectedVarsReg())])
newDatay <- data.frame(xdata,ydata)
})
#ydata <- alp[as.character(updatedY())]
#print (ydata)
#updatedHeader <- headerx[ headerx != as.character(updatedY())]
modReg <- lm(updatedY()[,2] ~ updatedY()[,1], data = alp)
headerx <- names(alp)
headerx <- headerx[ headerx != as.character(names(updatedY()[2]))]
leng = length(headerx)
for (i in 2:leng) {
if(i!= match(names(updatedY()[2]), names(alp)) &  abs(cor(alp[i],updatedY()[2])) > 0.5 )
{
modReg <- update(modReg,as.formula(paste0(".~ .+ alp[,",i,"]")))
}
}
print(mtable(modReg))
#summary(modReg)
#attach(alp)
#dtFrame22 <- eventReactive(input$actButton2,{
#ydataReg <- alp[as.character(selectedVarsReg()[2])]
#xdataReg <- alp[as.character(c(selectedVarsReg()[1]))]
#newDatax <- data.frame(xdataReg,ydataReg)
#})
#print(dtFrame22()[1])
#print (dtFrame22()[,1])
#     modReg <- lm(dtFrame22()[,2] ~ dtFrame22()[,1][1])
#     leng = length(dtFrame22()[,1])
#     for (i in 2:leng) {
#       modReg <- update(modReg, ~ .+ dtFrame22()[,1][i] )
#     }
#     summary(modReg)
#plot(dtFrame22(), col ="red")
})
})
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
install_github("AnalytixWare/ShinySky")
shiny::runApp('App-1')
runApp(file.path(system.file("examples", package = "shinysky")), display.mode = "showcase")
iris
head(iris)
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
file_ext("mtcars.csv")
library(fileutils)
install.packages("fileutils")
library(tools)
file_ext("mtcars.csv")
install.packages("gdata")
shiny::runApp('App-1')
remove.packages("gdata")
install.packages("XLConnect")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
remove.packages("XLConnect")
install.packages("xlsx")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
install.packages("session")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
load("App-1/newSession.Rsession")
load("App-1/newSession.Rsession")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
alp["cyl"]
shiny::runApp('App-1')
shiny::runApp('App-1')
alp["cyl"]
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
remove.packages("session")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
install.packages("s[")
install.packages("sp")
remove.packages(sp)
remove.packages("sp")
shiny::runApp('App-2')
install.packages("sp")
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
data(meuse)
xy = meuse[c("x", "y")] # retrieve coordinates as data.frame
class(meuse)
data(meuse) # reload data.frame
coordinates(meuse) = c("x", "y") # specify column names
class(meuse)
data("meuse")
data(meuse)
shiny::runApp('App-2')
alp[c(1,2)]
shiny::runApp('App-2')
shiny::runApp('App-2')
alp[,1]
alp[,2]
alp[2]
names(alp[3])
shiny::runApp('App-2')
install.packages("reshape2")
install.packages("reshape2")
shiny::runApp('App-2')
shiny::runApp('App-2')
install.packages("ggplot2")
shiny::runApp('App-2')
View(xyz)
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2',host = "0.0.0.0",port=5050)
shiny::runApp('App-2',host = "192.168.0.101",port=5050)
shiny::runApp('App-2',host = "10.77.13.54",port=5050)
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
remove.packages("shinysky")
install_github("AnalytixWare/ShinySky")
library(devtools)
install_github("AnalytixWare/ShinySky")
shiny::runApp('App-2')
shiny::runApp('App-2')
alp
alp[H2]
alp['H2']
alp[,'H2']
shiny::runApp('App-2')
